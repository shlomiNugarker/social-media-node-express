{"version":3,"file":"static/js/974.0fc5f6b5.chunk.js","mappings":"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","sources":["cmps/posts/PostsList.jsx","cmps/profile/EditModal.jsx","pages/Profile.jsx","services/imgUpload.service.js"],"sourcesContent":["import { PostPreview } from './post-preview/PostPreview'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useEffect } from 'react'\r\nimport loadingGif from '../../assets/imgs/loading-gif.gif'\r\nimport { useParams } from 'react-router-dom'\r\nimport {\r\n  addPosts,\r\n  addFilterByPosts,\r\n  setNextPage,\r\n} from '../../store/actions/postActions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nexport const PostsList = () => {\r\n  const dispatch = useDispatch()\r\n  const params = useParams()\r\n  const { posts } = useSelector((state) => state.postModule)\r\n  const { pageNumber } = useSelector((state) => state.postModule)\r\n  const { isPostsLoading } = useSelector((state) => state.postModule)\r\n  const { postsLength } = useSelector((state) => state.postModule)\r\n\r\n  const onLoadNextPage = () => {\r\n    const filterBy = {\r\n      pageNumber,\r\n    }\r\n    if (params.userId) filterBy.userId = params.userId\r\n    if (!postsLength && !posts) return\r\n    if (postsLength === posts?.length) return\r\n    dispatch(addFilterByPosts(filterBy))\r\n    dispatch(addPosts())\r\n    dispatch(setNextPage())\r\n  }\r\n\r\n  const handleScroll = () => {\r\n    if (posts?.length >= postsLength) return\r\n    if (\r\n      window.scrollY + window.innerHeight + 0.9 >=\r\n      document.documentElement.scrollHeight\r\n    ) {\r\n      onLoadNextPage()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll)\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll)\r\n    }\r\n  }, [postsLength])\r\n\r\n  if (!posts)\r\n    return (\r\n      <div className=\"posts-list\">\r\n        <span className=\"gif-container\">\r\n          <img className=\"loading-gif\" src={loadingGif} alt=\"\" />\r\n        </span>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      {posts.map((post,idx) => (\r\n        <PostPreview key={post._id+idx} post={post} />\r\n      ))}\r\n      <div onClick={onLoadNextPage} className=\"load-more\">\r\n        {!isPostsLoading && posts?.length < postsLength && (\r\n          <p className=\"load-btn\">\r\n            <span>\r\n              <FontAwesomeIcon icon=\"fa-solid fa-caret-down\" />\r\n            </span>\r\n          </p>\r\n        )}\r\n        {isPostsLoading && posts?.length < postsLength && (\r\n          <span className=\"gif-container\">\r\n            <img className=\"loading-gif\" src={loadingGif} alt=\"\" />\r\n          </span>\r\n        )}\r\n        {posts?.length === postsLength &&  <p >No more posts</p>}\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUser } from '../../store/actions/userActions'\r\nimport { uploadImg } from '../../services/imgUpload.service'\r\n\r\nexport function EditModal({ toggleShowEditModal, user }) {\r\n  const dispatch = useDispatch()\r\n  const [userToUpdate, setUserToUpdate] = useState({\r\n    age: user.age,\r\n    bg: user.bg,\r\n    email: user.email,\r\n    fullname: user.fullname,\r\n    imgUrl: user.imgUrl,\r\n    phone: user.phone,\r\n    profession: user.profession,\r\n    birthDate: user.birthDate,\r\n  })\r\n\r\n  const { age, bg, email, fullname, imgUrl, phone, profession, birthDate } =\r\n    userToUpdate\r\n\r\n  useEffect(() => {}, [])\r\n\r\n  const handleChange = ({ target }) => {\r\n    const field = target.name\r\n    const value = target.type === 'number' ? +target.value || '' : target.value\r\n    setUserToUpdate((prev) => {\r\n      return {\r\n        ...prev,\r\n        _id: user._id,\r\n        [field]: value,\r\n      }\r\n    })\r\n  }\r\n\r\n  const onSaveUser = () => {\r\n    dispatch(updateUser({ ...user, ...userToUpdate })).then((res) => {\r\n      if (res) toggleShowEditModal()\r\n    })\r\n  }\r\n\r\n  const onUploadImg = async (ev) => {\r\n    const res = await uploadImg(ev)\r\n    setUserToUpdate((prev) => {\r\n      return {\r\n        ...prev,\r\n        imgUrl: res.url,\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section className=\"edit-modal\">\r\n      <div className=\"bg\" onClick={toggleShowEditModal}></div>\r\n      <div className=\"container\">\r\n        <div className=\"title\">\r\n          <p>Edit profile</p>\r\n          <span onClick={toggleShowEditModal}>\r\n            <FontAwesomeIcon icon=\"fa-solid fa-x\" />\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"form-container\">\r\n          <form className=\"form\" action=\"\">\r\n            <label htmlFor=\"imgUrl\" className=\"add-file\">\r\n              <div className=\"add-btn\">\r\n                <p>Add image profile</p>\r\n\r\n                <FontAwesomeIcon\r\n                  className=\"upload-logo\"\r\n                  icon=\"fa-solid fa-cloud-arrow-up\"\r\n                />\r\n              </div>\r\n              <input\r\n                onChange={onUploadImg}\r\n                id=\"imgUrl\"\r\n                type=\"file\"\r\n                name=\"imgUrl\"\r\n                hidden\r\n              />\r\n              <img className=\"img-to-upload\" src={imgUrl} alt=\"\" />\r\n            </label>\r\n\r\n            <label htmlFor=\"first-name\" className=\"first-name\">\r\n              <p>\r\n                Fullname <span>*</span>\r\n              </p>\r\n              <input\r\n                name=\"fullname\"\r\n                onChange={handleChange}\r\n                id=\"fullname\"\r\n                type=\"text\"\r\n                value={fullname || ''}\r\n              />\r\n            </label>\r\n\r\n            <label htmlFor=\"email\" className=\"email\">\r\n              <p>Email</p>\r\n              <input\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                id=\"email\"\r\n                type=\"email\"\r\n                value={email || ''}\r\n              />\r\n            </label>\r\n\r\n            <label htmlFor=\"profession\" className=\"profession\">\r\n              <p>Profession</p>\r\n              <input\r\n                name=\"profession\"\r\n                onChange={handleChange}\r\n                id=\"profession\"\r\n                type=\"text\"\r\n                value={profession || ''}\r\n              />\r\n            </label>\r\n\r\n            <label htmlFor=\"age\" className=\"age\">\r\n              <p>Age</p>\r\n              <input\r\n                name=\"age\"\r\n                onChange={handleChange}\r\n                id=\"age\"\r\n                type=\"number\"\r\n                value={age || ''}\r\n              />\r\n            </label>\r\n\r\n            <label htmlFor=\"phone\" className=\"phone\">\r\n              <p>Phone</p>\r\n              <input\r\n                name=\"phone\"\r\n                onChange={handleChange}\r\n                id=\"phone\"\r\n                type=\"text\"\r\n                value={phone || ''}\r\n              />\r\n            </label>\r\n          </form>\r\n        </div>\r\n        <div className=\"btn-save-container\">\r\n          <button onClick={onSaveUser}>Save</button>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import { useHistory, useParams } from 'react-router-dom'\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { userService } from '../services/user/userService'\r\nimport { PostsList } from '../cmps/posts/PostsList'\r\nimport { ImgPreview } from '../cmps/profile/ImgPreview'\r\nimport loadingGif from '../assets/imgs/loading-gif.gif'\r\nimport { EditModal } from '../cmps/profile/EditModal'\r\nimport {\r\n  getPostsLength,\r\n  loadPosts,\r\n  setCurrPage,\r\n  setFilterByPosts,\r\n} from '../store/actions/postActions'\r\nimport { updateUser } from '../store/actions/userActions'\r\n\r\nfunction Profile() {\r\n  const params = useParams()\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n\r\n  const [user, setUser] = useState(null)\r\n  const [isShowImdProfile, setIsShowImdProfile] = useState(false)\r\n  const [isShowEditModal, setIsShowEditModal] = useState(false)\r\n  const [isConnected, setIsConnected] = useState(null)\r\n\r\n  const { posts } = useSelector((state) => state.postModule)\r\n  const { loggedInUser } = useSelector((state) => state.userModule)\r\n\r\n  const checkIsConnected = () => {\r\n    const isConnected = loggedInUser?.connections?.some(\r\n      (connection) => connection?.userId === user?._id\r\n    )\r\n\r\n    setIsConnected(isConnected)\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIsConnected()\r\n  }, [user])\r\n\r\n  const loadUser = async () => {\r\n    const user = await userService.getById(params.userId)\r\n    setUser(() => user)\r\n  }\r\n\r\n  const toggleShowImgProfile = () => {\r\n    setIsShowImdProfile((prev) => !prev)\r\n  }\r\n  const toggleShowEditModal = () => {\r\n    setIsShowEditModal((prev) => !prev)\r\n  }\r\n\r\n  const onShowProfile = () => {\r\n    toggleShowImgProfile()\r\n  }\r\n\r\n  const connectProfile = async () => {\r\n    if (!user) return\r\n    if (isConnected === true) {\r\n      // Remove\r\n      const connectionToRemve = JSON.parse(JSON.stringify(user))\r\n      const loggedInUserToUpdate = JSON.parse(JSON.stringify(loggedInUser))\r\n\r\n      loggedInUserToUpdate.connections =\r\n        loggedInUserToUpdate.connections.filter(\r\n          (connection) => connection.userId !== connectionToRemve._id\r\n        )\r\n\r\n      connectionToRemve.connections = connectionToRemve.connections.filter(\r\n        (connection) => connection.userId !== loggedInUserToUpdate._id\r\n      )\r\n\r\n      dispatch(updateUser(loggedInUserToUpdate))\r\n      dispatch(updateUser(connectionToRemve))\r\n\r\n      setUser((prev) => ({ ...prev, ...connectionToRemve }))\r\n    } else if (isConnected === false) {\r\n      // Add\r\n      const connectionToAdd = JSON.parse(JSON.stringify(user))\r\n\r\n      const loggedInUserToUpdate = JSON.parse(JSON.stringify(loggedInUser))\r\n\r\n      connectionToAdd.connections.unshift({\r\n        userId: loggedInUserToUpdate._id,\r\n        fullname: loggedInUserToUpdate.fullname,\r\n      })\r\n\r\n      loggedInUserToUpdate.connections.push({\r\n        userId: connectionToAdd._id,\r\n        fullname: connectionToAdd.fullname,\r\n      })\r\n\r\n      dispatch(updateUser(loggedInUserToUpdate))\r\n      dispatch(updateUser(connectionToAdd))\r\n      setUser(connectionToAdd)\r\n    }\r\n  }\r\n\r\n  const moveToChat = () => {\r\n    history.push(`/main/message/${user?._id}`)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const filterBy = {\r\n      userId: params.userId,\r\n    }\r\n    dispatch(setCurrPage('profile'))\r\n    dispatch(setFilterByPosts(filterBy))\r\n    loadUser()\r\n    dispatch(loadPosts(filterBy))\r\n    dispatch(getPostsLength())\r\n\r\n    return () => {\r\n      dispatch(setFilterByPosts(null))\r\n    }\r\n  }, [params.userId, loggedInUser])\r\n\r\n  if (!user)\r\n    return (\r\n      <section className=\"feed-load\">\r\n        <span className=\"gif-container\">\r\n          <img className=\"loading-gif\" src={loadingGif} alt=\"\" />\r\n        </span>\r\n      </section>\r\n    )\r\n\r\n  const isLoggedInUserProfile = loggedInUser?._id === user?._id\r\n\r\n  return (\r\n    <section className=\"profile-page\">\r\n      <div className=\"left\">\r\n        <div className=\"user-profile\">\r\n          <div className=\"bg\" style={{ backgroundImage: `url(${user.bg})` }}>\r\n            <div className=\"img-container\" onClick={onShowProfile}>\r\n              <img src={user.imgUrl} alt=\"\" className=\"img\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"user-details\">\r\n            <div>\r\n              <div className=\"name\">\r\n                <h1>{user.fullname}</h1>\r\n              </div>\r\n              <div className=\"profession\">\r\n                <p>{user.profession}</p>\r\n              </div>\r\n              <div className=\"profession\">\r\n                <p>{user.email}</p>\r\n              </div>\r\n              <div className=\"btns-container\">\r\n                {isLoggedInUserProfile && (\r\n                  <button className=\"add-details\" onClick={toggleShowEditModal}>\r\n                    Edit profile\r\n                  </button>\r\n                )}\r\n                {!isLoggedInUserProfile && (\r\n                  <button className=\"connect\" onClick={connectProfile}>\r\n                    <FontAwesomeIcon icon=\"fa-solid fa-user-plus\" />\r\n                    <p>{!isConnected ? 'Connect' : 'Disconnect'}</p>\r\n                  </button>\r\n                )}\r\n\r\n                <button className=\"message\" onClick={() => moveToChat()}>\r\n                  Message\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"user-posts\">\r\n          {(posts?.length && <PostsList posts={posts} />) || (\r\n            <div>\r\n              <p>{user.fullname} has not published any posts yet.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"right\">\r\n        <div className=\"top-div\"></div>\r\n        <div className=\"bottom-div\"></div>\r\n      </div>\r\n      {isShowImdProfile && (\r\n        <ImgPreview\r\n          toggleShowImg={toggleShowImgProfile}\r\n          imgUrl={user.imgUrl}\r\n          title=\"Profile photo\"\r\n        />\r\n      )}\r\n\r\n      {isShowEditModal && (\r\n        <EditModal toggleShowEditModal={toggleShowEditModal} user={user} />\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import { httpService } from \"./httpService\";\r\n\r\nconst toBase64 = (file) =>\r\n  new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n\r\nexport const uploadImg = async (ev) => {\r\n  try {\r\n    const file = ev.target.files[0];\r\n\r\n    if (!file) {\r\n      throw new Error(\"No file selected\");\r\n    }\r\n\r\n    const base64File = await toBase64(file);\r\n\r\n    const response = await httpService.post(\"cloudinary/upload\", {\r\n      file: base64File,\r\n      resourceType: \"image\",\r\n    });\r\n\r\n    return response;\r\n  } catch (err) {\r\n    console.error(\"Error uploading image:\", err?.message);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const uploadVid = async (ev) => {\r\n  try {\r\n    const file = ev.target.files[0];\r\n\r\n    if (!file) {\r\n      throw new Error(\"No file selected\");\r\n    }\r\n\r\n    const base64File = await toBase64(file);\r\n\r\n    const response = await httpService.post(\"cloudinary/upload\", {\r\n      file: base64File,\r\n      resourceType: \"video\",\r\n    });\r\n\r\n    return response;\r\n  } catch (err) {\r\n    console.error(\"Error uploading video:\", err?.message);\r\n    throw err;\r\n  }\r\n};\r\n"],"names":["PostsList","dispatch","useDispatch","params","useParams","posts","useSelector","state","postModule","pageNumber","isPostsLoading","postsLength","onLoadNextPage","filterBy","userId","length","addFilterByPosts","addPosts","setNextPage","handleScroll","window","scrollY","innerHeight","document","documentElement","scrollHeight","useEffect","addEventListener","removeEventListener","className","map","post","idx","_id","onClick","icon","src","loadingGif","alt","EditModal","toggleShowEditModal","user","userToUpdate","setUserToUpdate","useState","age","bg","email","fullname","imgUrl","phone","profession","birthDate","handleChange","target","field","name","value","type","prev","action","htmlFor","onChange","async","res","uploadImg","ev","url","id","hidden","updateUser","then","history","useHistory","setUser","isShowImdProfile","setIsShowImdProfile","isShowEditModal","setIsShowEditModal","isConnected","setIsConnected","loggedInUser","userModule","connections","some","connection","checkIsConnected","toggleShowImgProfile","setCurrPage","setFilterByPosts","userService","loadUser","loadPosts","getPostsLength","isLoggedInUserProfile","style","backgroundImage","connectionToRemve","JSON","parse","stringify","loggedInUserToUpdate","filter","connectionToAdd","unshift","push","ImgPreview","toggleShowImg","title","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","files","Error","base64File","httpService","resourceType","err","console","message","uploadVid"],"sourceRoot":""}