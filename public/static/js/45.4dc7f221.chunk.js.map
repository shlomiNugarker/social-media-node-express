{"version":3,"file":"static/js/45.4dc7f221.chunk.js","mappings":"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","sources":["cmps/connections/ConnectionPreview.jsx","cmps/connections/ConnectionList.jsx","pages/MyNetwork.jsx","services/utilService.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport loadingCircle from '../../assets/imgs/loading-circle.gif'\r\nimport { updateUser } from '../../store/actions/userActions'\r\n\r\nexport function ConnectionPreview({ user }) {\r\n  const dispatch = useDispatch()\r\n\r\n  const [isConnected, setIsConnected] = useState(false)\r\n\r\n  const { loggedInUser } = useSelector((state) => state.userModule)\r\n\r\n  const checkIsConnected = useCallback(() => {\r\n    const isConnected = loggedInUser?.connections?.some(\r\n      (connection) => connection?.userId === user?._id\r\n    )\r\n\r\n    setIsConnected(isConnected)\r\n  }, [loggedInUser, user])\r\n\r\n  useEffect(() => {\r\n    checkIsConnected()\r\n    return () => {}\r\n  }, [checkIsConnected])\r\n\r\n  const connectProfile = async () => {\r\n    if (!user) return\r\n    if (isConnected === true) {\r\n      // Remove\r\n      const connectionToRemve = JSON.parse(JSON.stringify(user))\r\n      const loggedInUserToUpdate = JSON.parse(JSON.stringify(loggedInUser))\r\n\r\n      loggedInUserToUpdate.connections =\r\n        loggedInUserToUpdate.connections.filter(\r\n          (connection) => connection.userId !== connectionToRemve._id\r\n        )\r\n\r\n      connectionToRemve.connections = connectionToRemve.connections.filter(\r\n        (connection) => connection.userId !== loggedInUserToUpdate._id\r\n      )\r\n\r\n      dispatch(updateUser(loggedInUserToUpdate))\r\n      dispatch(updateUser(connectionToRemve))\r\n    } else if (isConnected === false) {\r\n      // Add\r\n      const connectionToAdd = JSON.parse(JSON.stringify(user))\r\n\r\n      const loggedInUserToUpdate = JSON.parse(JSON.stringify(loggedInUser))\r\n\r\n      connectionToAdd.connections.unshift({\r\n        userId: loggedInUserToUpdate._id,\r\n        fullname: loggedInUserToUpdate.fullname,\r\n      })\r\n\r\n      loggedInUserToUpdate.connections.push({\r\n        userId: connectionToAdd._id,\r\n        fullname: connectionToAdd.fullname,\r\n      })\r\n\r\n      dispatch(updateUser(loggedInUserToUpdate))\r\n      dispatch(updateUser(connectionToAdd))\r\n    }\r\n  }\r\n\r\n  if (!user || isConnected) return\r\n  return (\r\n    <li className=\"connection-preview\">\r\n      <Link to={`/main/profile/${user?._id}`}>\r\n        <div className=\"bg\">\r\n          {(user.imgUrl && (\r\n            <img src={user.imgUrl} alt=\"\" className=\"img-profile\" />\r\n          )) || <img src={loadingCircle} alt=\"\" />}\r\n        </div>\r\n        <div className=\"fullname\">\r\n          <p>{user.fullname}</p>\r\n        </div>\r\n        <div className=\"profession\">\r\n          <p>{user.profession}</p>\r\n        </div>\r\n      </Link>\r\n      <div className=\"followers-count\">\r\n        <p> {user.connections?.length} conections</p>\r\n      </div>\r\n\r\n      <div className=\"btn-container\" onClick={connectProfile}>\r\n        <button>{!isConnected ? 'Connect' : 'Disconnect'}</button>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n","import { utilService } from '../../services/utilService'\r\nimport { ConnectionPreview } from './ConnectionPreview'\r\n\r\nexport function ConnectionList({ users }) {\r\n  return (\r\n    <ul className=\"connection-list\">\r\n      {users.map((user) => (\r\n        <ConnectionPreview key={utilService.makeId()} user={user} />\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { ConnectionList } from '../cmps/connections/ConnectionList'\r\nimport { getUsers, setUsers } from '../store/actions/userActions'\r\nimport { setCurrPage } from '../store/actions/postActions'\r\nimport loadingGif from '../assets/imgs/loading-gif.gif'\r\n\r\nfunction MyNetwork() {\r\n  const dispatch = useDispatch()\r\n  let history = useHistory()\r\n\r\n  const { users } = useSelector((state) => state.userModule)\r\n  const { loggedInUser } = useSelector((state) => state.userModule)\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers())\r\n    dispatch(setCurrPage('mynetwork'))\r\n\r\n    return () => {\r\n      dispatch(setUsers(null))\r\n    }\r\n  }, [dispatch])\r\n\r\n  if (!users)\r\n    return (\r\n      <section className=\"network\">\r\n        <span className=\"gif-container\">\r\n          <img className=\"loading-gif\" src={loadingGif} alt=\"\" />\r\n        </span>\r\n      </section>\r\n    )\r\n  return (\r\n    <section className=\"my-network-page\">\r\n      <div className=\"left\">\r\n        <div className=\"manage-network\">\r\n          <div>\r\n            <h3>Manage my network</h3>\r\n          </div>\r\n          <ul>\r\n            <li>\r\n              <button onClick={() => history.push('/main/connections')}>\r\n                <div>\r\n                  <span className=\"logo\">\r\n                    <FontAwesomeIcon icon=\"fa-solid fa-user-group\" />\r\n                  </span>\r\n                  <span className=\"txt\">\r\n                    <p>Connections</p>\r\n                  </span>\r\n                </div>\r\n                <span>\r\n                  <p>\r\n                    {loggedInUser.connections?.length === 0\r\n                      ? 0\r\n                      : loggedInUser.connections?.length}\r\n                  </p>\r\n                </span>\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"right\">\r\n        <div className=\"recommended\">\r\n          <div>\r\n            <h3>Recommended for you</h3>\r\n          </div>\r\n\r\n          <ConnectionList users={users} />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default MyNetwork\r\n","export const utilService = {\r\n  makeId,\r\n  debounce,\r\n  getRandomInt,\r\n  getRandomColor,\r\n  getLoremIpsum,\r\n  loadFromStorage,\r\n  saveToStorage,\r\n  loadFromSessionStorage,\r\n  saveToSessionStorage,\r\n  delay,\r\n}\r\nfunction makeId(length = 5) {\r\n  var txt = ''\r\n  var possible =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n  for (var i = 0; i < length; i++) {\r\n    txt += possible.charAt(Math.floor(Math.random() * possible.length))\r\n  }\r\n  return txt\r\n}\r\n\r\nfunction delay(ms = 1500) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, ms)\r\n  })\r\n}\r\n\r\nfunction debounce(func, wait) {\r\n  let timeout\r\n\r\n  return function executedFunction(...args) {\r\n    //rest-makes the args to an array\r\n    const later = () => {\r\n      clearTimeout(timeout)\r\n      func(...args) //spread-from array to vars\r\n    }\r\n\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(later, wait)\r\n  }\r\n}\r\n\r\nfunction getRandomColor() {\r\n  var color = '#'\r\n  for (var i = 0; i < 6; i++) {\r\n    color += Math.floor(Math.random() * 10)\r\n  }\r\n  return color\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min) + min) //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction getLoremIpsum(length = 5) {\r\n  const words = [\r\n    'The sky',\r\n    'above',\r\n    'the port',\r\n    'was',\r\n    'the color of television',\r\n    'tuned',\r\n    'to',\r\n    'a dead channel',\r\n    '.',\r\n    'All',\r\n    'this happened',\r\n    'more or less',\r\n    '.',\r\n    'I',\r\n    'had',\r\n    'the story',\r\n    'bit by bit',\r\n    'from various people',\r\n    'and',\r\n    'as generally',\r\n    'happens',\r\n    'in such cases',\r\n    'each time',\r\n    'it',\r\n    'was',\r\n    'a different story',\r\n    '.',\r\n    'It',\r\n    'was',\r\n    'a pleasure',\r\n    'to',\r\n    'burn',\r\n  ]\r\n  let sentence = ''\r\n  while (length > 0) {\r\n    sentence += words[getRandomInt(0, words.length - 1)] + ' '\r\n    length--\r\n  }\r\n  sentence += '.'\r\n  return sentence.trim()\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n  var val = localStorage.getItem(key)\r\n  return val ? JSON.parse(val) : null\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n  localStorage[key] = JSON.stringify(val)\r\n}\r\n\r\nfunction loadFromSessionStorage(key) {\r\n  var val = sessionStorage.getItem(key)\r\n  return val ? JSON.parse(val) : null\r\n}\r\n\r\nfunction saveToSessionStorage(key, val) {\r\n  sessionStorage[key] = JSON.stringify(val)\r\n}\r\n"],"names":["ConnectionPreview","user","dispatch","useDispatch","useState","isConnected","setIsConnected","loggedInUser","useSelector","state","userModule","checkIsConnected","useCallback","connections","some","connection","userId","_id","useEffect","connectProfile","connectionToRemve","JSON","parse","stringify","loggedInUserToUpdate","filter","updateUser","connectionToAdd","unshift","fullname","push","className","to","imgUrl","src","alt","loadingCircle","profession","length","onClick","ConnectionList","users","map","utilService","history","useHistory","getUsers","setCurrPage","setUsers","icon","loadingGif","makeId","txt","possible","i","charAt","Math","floor","random","debounce","func","wait","timeout","args","later","clearTimeout","setTimeout","getRandomInt","getRandomColor","color","getLoremIpsum","words","sentence","trim","loadFromStorage","key","val","localStorage","getItem","saveToStorage","loadFromSessionStorage","sessionStorage","saveToSessionStorage","delay","ms","Promise","resolve","min","max","ceil"],"sourceRoot":""}